#!/usr/bin/env bash

# The structure behind this script is based on the following snippet:
# @source: https://github.com/nickjj/docker-flask-example/blob/main/run

set -eo pipefail

# ---------------------------------------------------------------------
# Variables
# ---------------------------------------------------------------------

_PATH_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
_PATH_DOCKER="$_PATH_DIR/.docker"

# If we're running in CI we need to disable TTY allocation for docker-compose
# commands that enable it by default, such as exec and run.
TTY=""
if [[ ! -t 1 ]]; then
  TTY="-T"
fi

# ---------------------------------------------------------------------
# Environment
# ---------------------------------------------------------------------

# import env file
if [[ -f "${_PATH_DIR}/.env" ]]; then
  # shellcheck source=.env
    source "${_PATH_DIR}/.env"
  else
    echo "Warning! No .env file found, please create one."
    exit 1;
fi

# -----------------------------------------------------------------------------
# Helper functions start with _ and aren't listed in this script's help menu.
# -----------------------------------------------------------------------------

# Custom docker-compose command
_dc() {
  docker compose -p "$PROJECT" -f "$_PATH_DOCKER/docker-compose.yml" -f "$_PATH_DOCKER/docker-compose.$ENV.yml" --env-file "$_PATH_DIR/.env" ${TTY} "$@"
}

# Check non-existent arguments
 _isCommand() {
  if ! type "$1" >/dev/null 2>&1; then
    echo "Warning! Command not found: $1"
    exit 1;
  fi;
}

# Check if docker is installed
_checkDocker() {
  if ! type "docker" >/dev/null 2>&1; then
    echo "Error: Docker not found"
    exit 1;
  fi;
}

# Check if docker compose is installed
_checkDockerCompose() {
  if ! type "docker-compose" >/dev/null 2>&1; then
    echo "Error: this stack requires Docker Compose v2, please install it and try again"
    exit 1;
  fi;


  # check if docker compose is installed
  if ! type "docker compose" >/dev/null 2>&1; then
    echo "Error: Docker Compose not found"
    exit 1;
  fi;
}

# Check if environment is set
_checkEnvironment() {
  if [[ -z ${ENV+x} ]]; then
    echo "Error: ENV variable not set"
    exit 1;
  else
    return 0;
  fi;
}

# -----------------------------------------------------------------------------
# Actions
# -----------------------------------------------------------------------------

# Build the project
build() {
  _dc build
}

# Remove all containers, images, and volumes associated with the project
clean() {
  _dc down --rmi all -v --remove-orphans
}

# Get an help message
help() {
  printf "%s <task> [args]\n\nTasks:\n" "${0}"
  compgen -A function | grep -v "^_" | cat -n
  printf "\nExtended help:\n  Each task has comments for general usage\n"
}

# Run the project
start() {
  _dc up -d
}

# Stop the project
stop() {
  _dc stop
}

# Restart the project
restart() {
  _dc restart
}

# ---------------------------------------------------------------------
# Run the Project
# ---------------------------------------------------------------------

# !IMPORTANT
# Execute the action passed as the first argument
_checkDocker; \
_checkDockerCompose; \
_checkEnvironment; \
_isCommand "${1:-help}"; \
# This idea is heavily inspired by: https://github.com/adriancooney/Taskfile
TIMEFORMAT=$'\nProcess completed in %3lR'; \
time "${@:-help}";
